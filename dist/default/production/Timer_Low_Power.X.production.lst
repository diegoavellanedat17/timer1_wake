

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Jun 09 22:41:48 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	12F675
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	intentry,global,class=CODE,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x5E,2
    12  0000                     
    13                           ; Version 2.20
    14                           ; Generated 29/04/2020 GMT
    15                           ; 
    16                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC12F675 Definitions
    45                           ; 
    46                           ; SFR Addresses
    47  0000                     	;# 
    48  0001                     	;# 
    49  0002                     	;# 
    50  0003                     	;# 
    51  0004                     	;# 
    52  0005                     	;# 
    53  000A                     	;# 
    54  000B                     	;# 
    55  000C                     	;# 
    56  000E                     	;# 
    57  000E                     	;# 
    58  000F                     	;# 
    59  0010                     	;# 
    60  0019                     	;# 
    61  001E                     	;# 
    62  001F                     	;# 
    63  0081                     	;# 
    64  0085                     	;# 
    65  008C                     	;# 
    66  008E                     	;# 
    67  0090                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0096                     	;# 
    71  0099                     	;# 
    72  009A                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  009F                     	;# 
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000E                     	;# 
    89  000E                     	;# 
    90  000F                     	;# 
    91  0010                     	;# 
    92  0019                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  008C                     	;# 
    98  008E                     	;# 
    99  0090                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0096                     	;# 
   103  0099                     	;# 
   104  009A                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  000E                     _TMR1L	set	14
   112  000F                     _TMR1H	set	15
   113  0010                     _T1CONbits	set	16
   114  000B                     _INTCONbits	set	11
   115  0010                     _T1CON	set	16
   116  000B                     _INTCON	set	11
   117  000C                     _PIR1bits	set	12
   118  0028                     _GP0	set	40
   119  008C                     _PIE1bits	set	140
   120  008C                     _PIE1	set	140
   121  0428                     _TRISIO0	set	1064
   122                           
   123                           	psect	cinit
   124  000C                     start_initialization:	
   125                           ; #config settings
   126                           
   127  000C                     __initialization:
   128                           
   129                           ; Clear objects allocated to BANK0
   130  000C  1283               	bcf	3,5	;RP0=0, select bank0
   131  000D  01A8               	clrf	__pbssBANK0& (0+127)
   132  000E  01A9               	clrf	(__pbssBANK0+1)& (0+127)
   133  000F                     end_of_initialization:	
   134                           ;End of C runtime variable initialization code
   135                           
   136  000F                     __end_of__initialization:
   137  000F  0183               	clrf	3
   138  0010  283C               	ljmp	_main	;jump to C main() function
   139                           
   140                           	psect	bssBANK0
   141  0028                     __pbssBANK0:
   142  0028                     _count:
   143  0028                     	ds	2
   144                           
   145                           	psect	cstackBANK0
   146  0020                     __pcstackBANK0:
   147  0020                     ?_isr:
   148  0020                     ??_isr:	
   149                           ; 1 bytes @ 0x0
   150                           
   151  0020                     ?_main:	
   152                           ; 1 bytes @ 0x0
   153                           
   154                           
   155                           ; 1 bytes @ 0x0
   156  0020                     	ds	5
   157  0025                     ??_main:
   158                           
   159                           ; 1 bytes @ 0x5
   160  0025                     	ds	3
   161                           
   162                           	psect	maintext
   163  003C                     __pmaintext:	
   164 ;;
   165 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   166 ;;
   167 ;; *************** function _main *****************
   168 ;; Defined at:
   169 ;;		line 58 in file "main.c"
   170 ;; Parameters:    Size  Location     Type
   171 ;;		None
   172 ;; Auto vars:     Size  Location     Type
   173 ;;		None
   174 ;; Return value:  Size  Location     Type
   175 ;;                  1    wreg      void 
   176 ;; Registers used:
   177 ;;		wreg, status,2
   178 ;; Tracked objects:
   179 ;;		On entry : B00/0
   180 ;;		On exit  : 0/0
   181 ;;		Unchanged: 0/0
   182 ;; Data sizes:     COMMON   BANK0
   183 ;;      Params:         0       0
   184 ;;      Locals:         0       0
   185 ;;      Temps:          0       3
   186 ;;      Totals:         0       3
   187 ;;Total ram usage:        3 bytes
   188 ;; Hardware stack levels required when called:    1
   189 ;; This function calls:
   190 ;;		Nothing
   191 ;; This function is called by:
   192 ;;		Startup code after reset
   193 ;; This function uses a non-reentrant model
   194 ;;
   195                           
   196                           
   197                           ;psect for function _main
   198  003C                     _main:
   199  003C                     l689:	
   200                           ;incstack = 0
   201                           ; Regs used in _main: [wreg+status,2]
   202                           
   203                           
   204                           ;main.c: 59:     INTCON=0x00;
   205  003C  018B               	clrf	11	;volatile
   206                           
   207                           ;main.c: 60:     T1CON=0x00;
   208  003D  1283               	bcf	3,5	;RP0=0, select bank0
   209  003E  0190               	clrf	16	;volatile
   210                           
   211                           ;main.c: 61:     PIE1=0x00;
   212  003F  1683               	bsf	3,5	;RP0=1, select bank1
   213  0040  018C               	clrf	12	;volatile
   214  0041                     l691:
   215                           
   216                           ;main.c: 64:     TRISIO0=0;
   217  0041  1005               	bcf	5,0	;volatile
   218  0042                     l693:
   219                           
   220                           ;main.c: 65:     GP0=0;
   221  0042  1283               	bcf	3,5	;RP0=0, select bank0
   222  0043  1005               	bcf	5,0	;volatile
   223  0044                     l695:
   224                           
   225                           ;main.c: 68:     INTCONbits.GIE=1;
   226  0044  178B               	bsf	11,7	;volatile
   227  0045                     l697:
   228                           
   229                           ;main.c: 69:     INTCONbits.PEIE=1;
   230  0045  170B               	bsf	11,6	;volatile
   231  0046                     l699:
   232                           
   233                           ;main.c: 71:     GP0=1;
   234  0046  1405               	bsf	5,0	;volatile
   235  0047                     l701:
   236                           
   237                           ;main.c: 72:     _delay((unsigned long)((2000)*(4000000/4000.0)));
   238  0047  300B               	movlw	11
   239  0048  00A7               	movwf	??_main+2
   240  0049  3026               	movlw	38
   241  004A  00A6               	movwf	??_main+1
   242  004B  305D               	movlw	93
   243  004C  00A5               	movwf	??_main
   244  004D                     u57:
   245  004D  0BA5               	decfsz	??_main,f
   246  004E  284D               	goto	u57
   247  004F  0BA6               	decfsz	??_main+1,f
   248  0050  284D               	goto	u57
   249  0051  0BA7               	decfsz	??_main+2,f
   250  0052  284D               	goto	u57
   251  0053  2854               	nop2
   252  0054                     l703:
   253                           
   254                           ;main.c: 73:     GP0=0;
   255  0054  1283               	bcf	3,5	;RP0=0, select bank0
   256  0055  1005               	bcf	5,0	;volatile
   257  0056                     l705:
   258                           
   259                           ;main.c: 92:     T1CONbits.TMR1ON=1;
   260  0056  1410               	bsf	16,0	;volatile
   261  0057                     l707:
   262                           
   263                           ;main.c: 93:     PIE1bits.TMR1IE=1;
   264  0057  1683               	bsf	3,5	;RP0=1, select bank1
   265  0058  140C               	bsf	12,0	;volatile
   266  0059                     l709:
   267                           
   268                           ;main.c: 94:     PIR1bits.TMR1IF=0;
   269  0059  1283               	bcf	3,5	;RP0=0, select bank0
   270  005A  100C               	bcf	12,0	;volatile
   271  005B                     l711:
   272                           
   273                           ;main.c: 95:     TMR1H=0x22;
   274  005B  3022               	movlw	34
   275  005C  008F               	movwf	15	;volatile
   276                           
   277                           ;main.c: 96:     TMR1L=0x00;
   278  005D  018E               	clrf	14	;volatile
   279  005E                     l38:	
   280                           ;main.c: 102:     while(1);
   281                           
   282  005E                     l39:
   283  005E  285E               	goto	l38
   284  005F  280B               	ljmp	start
   285  0060                     __end_of_main:
   286                           
   287                           	psect	text1
   288  0011                     __ptext1:	
   289 ;; *************** function _isr *****************
   290 ;; Defined at:
   291 ;;		line 27 in file "main.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;		None
   294 ;; Auto vars:     Size  Location     Type
   295 ;;		None
   296 ;; Return value:  Size  Location     Type
   297 ;;                  1    wreg      void 
   298 ;; Registers used:
   299 ;;		wreg, status,2, status,0
   300 ;; Tracked objects:
   301 ;;		On entry : 0/0
   302 ;;		On exit  : 0/0
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMMON   BANK0
   305 ;;      Params:         0       0
   306 ;;      Locals:         0       0
   307 ;;      Temps:          0       5
   308 ;;      Totals:         0       5
   309 ;;Total ram usage:        5 bytes
   310 ;; Hardware stack levels used:    1
   311 ;; This function calls:
   312 ;;		Nothing
   313 ;; This function is called by:
   314 ;;		Interrupt level 1
   315 ;; This function uses a non-reentrant model
   316 ;;
   317                           
   318                           
   319                           ;psect for function _isr
   320  0011                     _isr:
   321  0011                     i1l673:
   322                           
   323                           ;main.c: 40:     if( PIR1bits.TMR1IF){
   324  0011  1C0C               	btfss	12,0	;volatile
   325  0012  2814               	goto	u3_21
   326  0013  2815               	goto	u3_20
   327  0014                     u3_21:
   328  0014  2835               	goto	i1l33
   329  0015                     u3_20:
   330  0015                     i1l675:
   331                           
   332                           ;main.c: 42:         PIR1bits.TMR1IF=0;
   333  0015  100C               	bcf	12,0	;volatile
   334  0016                     i1l677:
   335                           
   336                           ;main.c: 43:         count++;
   337  0016  3001               	movlw	1
   338  0017  07A8               	addwf	_count,f
   339  0018  1803               	skipnc
   340  0019  0AA9               	incf	_count+1,f
   341  001A  3000               	movlw	0
   342  001B  07A9               	addwf	_count+1,f
   343  001C                     i1l679:
   344                           
   345                           ;main.c: 44:         if(count==5){
   346  001C  3005               	movlw	5
   347  001D  0628               	xorwf	_count,w
   348  001E  0429               	iorwf	_count+1,w
   349  001F  1D03               	btfss	3,2
   350  0020  2822               	goto	u4_21
   351  0021  2823               	goto	u4_20
   352  0022                     u4_21:
   353  0022  2835               	goto	i1l33
   354  0023                     u4_20:
   355  0023                     i1l681:
   356                           
   357                           ;main.c: 45:         GP0=1;
   358  0023  1405               	bsf	5,0	;volatile
   359  0024                     i1l683:
   360                           
   361                           ;main.c: 46:         _delay((unsigned long)((2000)*(4000000/4000.0)));
   362  0024  300B               	movlw	11
   363  0025  00A2               	movwf	??_isr+2
   364  0026  3026               	movlw	38
   365  0027  00A1               	movwf	??_isr+1
   366  0028  305D               	movlw	93
   367  0029  00A0               	movwf	??_isr
   368  002A                     u6_27:
   369  002A  0BA0               	decfsz	??_isr,f
   370  002B  282A               	goto	u6_27
   371  002C  0BA1               	decfsz	??_isr+1,f
   372  002D  282A               	goto	u6_27
   373  002E  0BA2               	decfsz	??_isr+2,f
   374  002F  282A               	goto	u6_27
   375  0030  2831               	nop2
   376  0031                     i1l685:
   377                           
   378                           ;main.c: 47:         GP0=0;
   379  0031  1283               	bcf	3,5	;RP0=0, select bank0
   380  0032  1005               	bcf	5,0	;volatile
   381  0033                     i1l687:
   382                           
   383                           ;main.c: 48:         count=0;
   384  0033  01A8               	clrf	_count
   385  0034  01A9               	clrf	_count+1
   386  0035                     i1l33:
   387  0035  0824               	movf	??_isr+4,w
   388  0036  008A               	movwf	10
   389  0037  0E23               	swapf	??_isr+3,w
   390  0038  0083               	movwf	3
   391  0039  0EDE               	swapf	btemp,f
   392  003A  0E5E               	swapf	btemp,w
   393  003B  0009               	retfie
   394  003C                     __end_of_isr:
   395  005E                     btemp	set	94	;btemp
   396  005E                     wtemp0	set	94
   397                           
   398                           	psect	intentry
   399  0004                     __pintentry:	
   400                           ;incstack = 0
   401                           ; Regs used in _isr: [wreg+status,2+status,0]
   402                           
   403  0004                     interrupt_function:
   404  005E                     saved_w	set	btemp
   405  0004  00DE               	movwf	btemp
   406  0005  0E03               	swapf	3,w
   407  0006  1283               	bcf	3,5	;RP0=0, select bank0
   408  0007  00A3               	movwf	??_isr+3
   409  0008  080A               	movf	10,w
   410  0009  00A4               	movwf	??_isr+4
   411  000A  2811               	ljmp	_isr
   412                           
   413                           	psect	config
   414                           
   415                           ;Config register CONFIG @ 0x2007
   416                           ;	Oscillator Selection bits
   417                           ;	FOSC = INTRCCLK, INTOSC oscillator: CLKOUT function on GP4/OSC2/CLKOUT pin, I/O functi
      +                          on on GP5/OSC1/CLKIN
   418                           ;	Watchdog Timer Enable bit
   419                           ;	WDTE = OFF, WDT disabled
   420                           ;	Power-Up Timer Enable bit
   421                           ;	PWRTE = ON, PWRT enabled
   422                           ;	GP3/MCLR pin function select
   423                           ;	MCLRE = ON, GP3/MCLR pin function is MCLR
   424                           ;	Brown-out Detect Enable bit
   425                           ;	BOREN = ON, BOD enabled
   426                           ;	Code Protection bit
   427                           ;	CP = OFF, Program Memory code protection is disabled
   428                           ;	Data Code Protection bit
   429                           ;	CPD = OFF, Data memory code protection is disabled
   430  2007                     	org	8199
   431  2007  31E5               	dw	12773

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      8      10

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0       0
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                  5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      8       A       4       16.1%
ABS                  0      0       A       5        0.0%
DATA                 0      0       A       6        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Jun 09 22:41:48 2021

                     l38 005E                       l39 005E                       u57 004D  
                    l701 0047                      l711 005B                      l703 0054  
                    l705 0056                      l707 0057                      l709 0059  
                    l691 0041                      l693 0042                      l695 0044  
                    l697 0045                      l689 003C                      l699 0046  
                    _GP0 0028                      _isr 0011                     ?_isr 0020  
                   _PIE1 008C                     i1l33 0035                     u3_20 0015  
                   u3_21 0014                     u4_20 0023                     u4_21 0022  
                   u6_27 002A                     _main 003C                     btemp 005E  
                   start 000B                    ??_isr 0020                    ?_main 0020  
                  _T1CON 0010                    i1l681 0023                    i1l673 0011  
                  i1l683 0024                    i1l675 0015                    i1l685 0031  
                  i1l677 0016                    i1l687 0033                    i1l679 001C  
                  _TMR1H 000F                    _TMR1L 000E                    _count 0028  
                  pclath 000A                    status 0003                    wtemp0 005E  
        __initialization 000C             __end_of_main 0060                   ??_main 0025  
                 _INTCON 000B                   saved_w 005E  __end_of__initialization 000F  
             __pbssBANK0 0028               __pmaintext 003C               __pintentry 0004  
                _TRISIO0 0428                  __ptext1 0011                _T1CONbits 0010  
           __size_of_isr 002B     end_of_initialization 000F      start_initialization 000C  
            __end_of_isr 003C                ___latbits 0000            __pcstackBANK0 0020  
      interrupt_function 0004                 _PIE1bits 008C                 _PIR1bits 000C  
          __size_of_main 0024               _INTCONbits 000B                 intlevel1 0000  
